/* Copyright 2015-2016 CyberTech Labs Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file was modified by Yurii Litvinov and Mikhail Wall to make it comply with the requirements of trikRuntime
 * project. See git revision history for detailed changes. */

#pragma once

#include <QtWidgets/QWidget>
#include <QtWidgets/QMenuBar>
#include <QtNetwork/QTcpSocket>
#include <QtCore/QTimer>
#include <QtCore/QSharedPointer>
#include <QtCore/QTranslator>

#include "connectForm.h"

namespace Ui {
class GamepadForm;
}

/// GUI for TRIK Gamepad. Also contains all logic, which is not good, but this code is meant to be simple.
class GamepadForm : public QWidget
{
	Q_OBJECT

public:
	/// Constructor.
	GamepadForm();
	~GamepadForm() override;

public slots:

	/// Slot for opening connect dialog
	void openConnectDialog();

	/// Slot for exit menu item
	void exit();

	/// Slot for about menu item
	void about();

private slots:

	/// Slot for gamepad "magic" buttons.
	void onButtonPressed(int buttonId);

	/// Slot for pad buttons (Up, Down, Left, Right), triggered when button is pressed.
	void onPadPressed(const QString &action);

	/// Slot for pad buttons (Up, Down, Left, Right), triggered when button is released.
	void onPadReleased(int padId);

	/// Slot for key press event
	void keyPressEvent(QKeyEvent *event);

	/// Slot for key release event
	void keyReleaseEvent(QKeyEvent *event);

	/// Slot for checking connection
	void checkConnection();

	/// Slot for creating menu bar
	void createMenu();

	/// Slot for creating timer for checking internet connection
	void createTimer();

	/// Slot for creating connections between buttons and events
	void createConnection();

	/// Slot for changing languages, triggered when click on needed language
	void changeLanguage(const QString &language);

	/// Slot for changing checkmark when language was changed
	void changeCheckmark(const int &languageId);

	/// Helper method for setting up gamepadForm
	void setUpGamepadForm();

private:
	/// Helper method that enables or disables gamepad buttons depending on connection state.
	void setButtonsEnabled(bool enabled);

	/// Field with GUI automatically generated by gamepadForm.ui.
	QScopedPointer<Ui::GamepadForm> mUi;

	/// TCP Socket object that handles network communication with TRIK.
	QTcpSocket mSocket;

	/// For opening dialog from gamepadForm
	QSharedPointer<ConnectForm> mMyNewConnectForm;

	/// For creating menu bar
	QSharedPointer<QMenuBar> mMenuBar;

	/// For creating connection menu
	QSharedPointer<QMenu> mConnectionMenu;
	QSharedPointer<QMenu> mLanguageMenu;

	/// Timer for checking connection
	QSharedPointer<QTimer> mTimer;

	/// Menu actions
	QSharedPointer<QAction> mConnectAction;
	QSharedPointer<QAction> mExitAction;
	QSharedPointer<QAction> mAboutAction;

	/// Languages actions
	QSharedPointer<QAction> mRussianLanguageAction;
	QSharedPointer<QAction> mEnglishLanguageAction;
	QSharedPointer<QAction> mFrenchLanguageAction;
	QSharedPointer<QAction> mGermanLanguageAction;

	/// For setting up translator in app
	QSharedPointer<QTranslator> mTranslator;

	/// For changing language whem another language was chosen
	void retranslate();

	/// For catching up event when language was changed
	void changeEvent(QEvent *event);

};
